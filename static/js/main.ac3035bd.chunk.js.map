{"version":3,"sources":["Context/ToDoListContext.js","ToDoList/Task/Task.js","Context/FilteredTaskContext.js","ToDoList/ToDoList.js","Navigation/Navigation.js","Filter/Filter.js","App.js","serviceWorker.js","index.js"],"names":["ToDoListContext","createContext","ToDoListProvider","props","useState","tasks","setTasks","useEffect","JSON","parse","localStorage","getItem","length","setItem","stringify","Provider","value","children","Task","task","id","useContext","showOptions","setShowOptions","edit","setEdit","taskId","showPopUp","setShowPopUp","name","setName","status","setStatus","deadline","setDeadline","notes","setNotes","label","setLabel","labels","setLabels","nLabels","setNLabels","subtask","setSubtask","subtasks","setSubtasks","nSubtasks","setNSubtasks","arr","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","handleDelete","splice","filter","e","handleEdit","handleModalHide","preventDefault","className","onClick","localTasks","thisTask","handleCheck","showTask","onSubmit","localstate","item","type","onChange","target","min","map","index","key","handleLabelRemove","handleLabelAdd","handleSubtaskRemove","handleSubtaskAdd","handleCheckInner","FilteredTaskContext","FilteredTaskProvider","setFilter","ToDoList","local","setLocal","console","log","Navigation","showAdd","setShowAdd","uuidv4","Filter","htmlFor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ac3035bd.chunk.js","sourcesContent":["import React, { useState, createContext, useEffect } from \"react\";\r\n\r\nexport const ToDoListContext = createContext();\r\n\r\nexport function ToDoListProvider(props) {\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (JSON.parse(localStorage.getItem('Tasks'))) {\r\n            if (JSON.parse(localStorage.getItem('Tasks')).length > 0) {\r\n                setTasks(JSON.parse(localStorage.getItem('Tasks')))\r\n            }\r\n        }\r\n\r\n    }, [])\r\n    useEffect(() => {\r\n        localStorage.setItem('Tasks', JSON.stringify(tasks))\r\n\r\n\r\n    }, [tasks])\r\n\r\n    return (\r\n        <ToDoListContext.Provider value={[tasks, setTasks]}>\r\n            {props.children}\r\n        </ToDoListContext.Provider>);\r\n}\r\n\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport { ToDoListContext } from \"../../Context/ToDoListContext\";\r\n\r\nfunction Task({ task, id }) {\r\n    const [tasks, setTasks] = useContext(ToDoListContext);\r\n    const [showOptions, setShowOptions] = useState(false);\r\n    const [edit, setEdit] = useState(false);\r\n    const [taskId, setTaskId] = useState(task.id)\r\n    const [showPopUp, setShowPopUp] = useState(false);\r\n    const [name, setName] = useState(task.name)\r\n    const [status, setStatus] = useState(task.status)\r\n    const [deadline, setDeadline] = useState(task.deadline)\r\n    const [notes, setNotes] = useState(task.notes)\r\n    const [label, setLabel] = useState(\"\")\r\n    const [labels, setLabels] = useState(task.labels)\r\n    const [nLabels, setNLabels] = useState(task.labels)\r\n    const [subtask, setSubtask] = useState(\"\")\r\n    const [subtasks, setSubtasks] = useState(task.subtasks)\r\n    const [nSubtasks, setNSubtasks] = useState(task.subtasks)\r\n    var arr = tasks;\r\n    var today = new Date();\r\n    var dd = today.getDate();\r\n    var mm = today.getMonth() + 1;\r\n    var yyyy = today.getFullYear();\r\n    if (dd < 10) {\r\n        dd = '0' + dd\r\n    }\r\n    if (mm < 10) {\r\n        mm = '0' + mm\r\n    }\r\n    today = yyyy + '-' + mm + '-' + dd;\r\n\r\n    useEffect(() => {\r\n    }, [tasks])\r\n    const handleDelete = (id) => {\r\n        arr.splice(id, 1)\r\n        setTasks(tasks.filter((e) => (e.id !== taskId)))\r\n        setShowOptions(false)\r\n        setShowPopUp(false)\r\n\r\n    }\r\n\r\n    const handleEdit = (id) => {\r\n        setShowPopUp(true)\r\n        setEdit(true)\r\n    }\r\n    const handleCheck = (id) => {\r\n        var localTasks = [...tasks]\r\n        var thisTask = localTasks[id]\r\n\r\n        if (thisTask.status === \"active\") {\r\n            thisTask.status = \"\"\r\n            setStatus(\"\")\r\n        }\r\n        else {\r\n            thisTask.status = \"active\"\r\n            setStatus(\"active\")\r\n        }\r\n        localTasks[id] = thisTask\r\n        setTasks(localTasks)\r\n    }\r\n    const handleCheckInner = (id, index) => {\r\n        var localTasks = [...tasks]\r\n        var thisTask = localTasks[id].subtasks[index]\r\n        if (thisTask.status === \"active\") {\r\n            thisTask.status = \"\"\r\n        }\r\n        else {\r\n            thisTask.status = \"active\"\r\n        }\r\n        localTasks[id].subtasks[index] = thisTask\r\n        setTasks(localTasks)\r\n    }\r\n    const handleModalHide = (e) => {\r\n        e.preventDefault();\r\n        setShowOptions(false)\r\n        setEdit(false)\r\n\r\n        setNLabels(labels)\r\n        setNSubtasks(subtasks)\r\n        setShowPopUp(false)\r\n    }\r\n    const handleEditSubmit = (e) => {\r\n        e.preventDefault();\r\n        var localstate = [...tasks];\r\n\r\n        var item = {\r\n            id: taskId,\r\n            name: name,\r\n            status: status,\r\n            deadline: deadline,\r\n            notes: notes,\r\n            labels: nLabels,\r\n            subtasks: nSubtasks\r\n        }\r\n        if (name.length > 0) {\r\n            localstate[id] = item\r\n            setTasks(localstate)\r\n            setShowOptions(false)\r\n            setEdit(false)\r\n\r\n            setShowPopUp(false)\r\n        }\r\n\r\n    }\r\n\r\n    const handleLabelAdd = (e) => {\r\n        e.preventDefault();\r\n        if (label.length > 0) {\r\n            setNLabels(nLabels => [...nLabels, label])\r\n            setLabel(\"\")\r\n        }\r\n    }\r\n\r\n    const handleLabelRemove = (id) => {\r\n        setNLabels(nLabels.filter((e) => (e !== nLabels[id])))\r\n    }\r\n\r\n    const handleSubtaskRemove = (id) => {\r\n        setNSubtasks(nSubtasks.filter((e) => (e !== nSubtasks[id])))\r\n    }\r\n\r\n    const handleSubtaskAdd = (e) => {\r\n        e.preventDefault();\r\n        var item = {\r\n            name: subtask,\r\n            status: \"active\"\r\n        }\r\n        if (subtask.length > 0) {\r\n            setNSubtasks(nSubtasks => [...nSubtasks, item])\r\n            setSubtask(\"\")\r\n        }\r\n    }\r\n\r\n    const showTask = (e) => {\r\n        e.preventDefault();\r\n\r\n        setName(task.name)\r\n        setStatus(task.status)\r\n        setDeadline(task.deadline)\r\n        setNotes(task.notes)\r\n        setLabels(task.labels)\r\n        setSubtasks(task.subtasks)\r\n\r\n        setShowPopUp(true)\r\n    }\r\n    return (\r\n        <div className={task.status === \"active\" ? 'row unchecked' : \"row checked\"}>\r\n            <div className=\"checkbox\" onClick={() => handleCheck(id)}></div>\r\n            <div className=\"name\" onClick={(e) => showTask(e)}>{task.name} <span className=\"date\">{task.deadline !== \"\" ? <p>{task.deadline}</p> : null}</span></div>\r\n\r\n            <button onClick={() => showOptions ? setShowOptions(false) : setShowOptions(true)}></button>\r\n            {showOptions ?\r\n                (<div className=\"options\"><button onClick={() => handleEdit(id)}>Edit</button><button onClick={() => handleDelete(id)}>Delete</button></div>)\r\n                : null}\r\n            {showPopUp ?\r\n                (<div className=\"overlay\">\r\n                    {edit ?\r\n                        (\r\n                            <form onSubmit={handleEditSubmit}>\r\n                                <div className=\"row jc-sb\">\r\n                                    <h3>Edit Task</h3>\r\n                                    <button onClick={(e) => handleModalHide(e)} className='close'></button>\r\n                                </div>\r\n                                <label className=\"mt-20 block\">Task Name</label>\r\n                                <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\r\n                                <label className=\"mt-20 block\">Notes</label>\r\n                                <textarea value={notes} onChange={(e) => setNotes(e.target.value)} />\r\n                                <div className=\"row jc-sb mt-20\">\r\n                                    <div className=\" col-6\">\r\n                                        <label>Duedate</label>\r\n                                        <input type=\"date\" min={today} value={deadline} onChange={(e) => setDeadline(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"col-6 block\">\r\n                                        <label>Labels</label>\r\n                                        <div className=\"labels\">\r\n                                            {nLabels.length > 0 ?\r\n                                                nLabels.map((item, index) => (\r\n                                                    <p key={\"label\" + index}>{item} <span className=\"close\" onClick={() => handleLabelRemove(index)}></span></p>\r\n                                                )) : null\r\n                                            }\r\n                                        </div>\r\n                                        <input type=\"text\" value={label} onChange={(e) => setLabel(e.target.value)} />\r\n                                        <button onClick={(e) => handleLabelAdd(e)} className=\"primary-button mt-10\">Add Label</button>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                                <label className=\"mt-20\">Subtasks</label>\r\n                                <div className=\"subtasks\">\r\n                                    {nSubtasks.length > 0 ?\r\n                                        nSubtasks.map((item, index) => (\r\n                                            <p key={\"subtask\" + index}>{item.name} <span className=\"close\" onClick={() => handleSubtaskRemove(index)}></span></p>\r\n                                        )) : null\r\n                                    }\r\n                                </div>\r\n                                <input type=\"text\" value={subtask} onChange={(e) => setSubtask(e.target.value)} />\r\n                                <button onClick={(e) => handleSubtaskAdd(e)} className=\"primary-button mt-10\">Add Subtask</button>\r\n                                <div className=\"block mt-20\">\r\n                                    <input type=\"submit\" className=\"primary-button\" value=\"Edit task\" />\r\n\r\n                                </div>\r\n                            </form>\r\n                        )\r\n                        : (<div className=\"white-box\">\r\n                            <div className=\"row jc-sb\">\r\n                                <h3>{name}</h3>\r\n                                <button onClick={(e) => handleModalHide(e)} className='close'></button>\r\n                            </div>\r\n                            {task.deadline.length > 0 ?\r\n                                (\r\n                                    <span className=\"date\">\r\n                                        <p>{task.deadline}</p>\r\n                                    </span>\r\n                                ) : null\r\n                            }\r\n                            {labels.length > 0 || notes.length > 0 ?\r\n                                (\r\n                                    <div className=\"row jc-sb\">\r\n                                        {notes.length > 0 ? (\r\n                                            <p className=\"notes\">{notes}</p>\r\n                                        ) : null}\r\n\r\n                                        {labels.length > 0 ?\r\n                                            (<div className=\"col-3 right\">\r\n                                                {\r\n                                                    labels.map((item, index) => (\r\n                                                        <p key={\"label\" + index}>{item} </p>\r\n                                                    ))}\r\n                                            </div>\r\n                                            ) : null\r\n                                        }\r\n\r\n                                    </div>\r\n                                ) : null\r\n                            }\r\n                            {subtasks.length > 0 ?\r\n                                (\r\n                                    <div className=\"subtasks\">\r\n                                        <h3 className=\"blue-text\">Subtasks</h3>\r\n                                        {subtasks.map((item, index) => (\r\n                                            <div key={\"subtask\" + index} className={item.status === \"active\" ? 'row unchecked' : \"row checked\"}>\r\n                                                <div className=\"checkbox\" onClick={() => handleCheckInner(id, index)}></div>\r\n\r\n                                                <p>{item.name} </p>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n\r\n                                )\r\n                                : null\r\n                            }\r\n                            <div className=\"col-3 row jc-sb right\">\r\n                                <button onClick={() => handleEdit(id)}>Edit</button><button onClick={() => handleDelete(id)}>Delete</button>\r\n                            </div>\r\n                        </div>)\r\n                    }\r\n\r\n                </div>)\r\n                : null}\r\n        </div>\r\n    )\r\n}\r\nexport default Task;","import React, { useEffect, useState, createContext } from \"react\";\r\n\r\nexport const FilteredTaskContext = createContext();\r\n\r\nexport function FilteredTaskProvider(props) {\r\n    const [filter, setFilter] = useState(false);\r\n    \r\n    return (\r\n        <FilteredTaskContext.Provider value={[filter, setFilter]}>\r\n            {props.children}\r\n        </FilteredTaskContext.Provider>);\r\n}\r\n\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport Task from './Task/Task';\r\nimport { ToDoListContext } from \"../Context/ToDoListContext\";\r\nimport { FilteredTaskContext } from '../Context/FilteredTaskContext';\r\n\r\nfunction ToDoList() {\r\n    const [tasks, setTasks] = useContext(ToDoListContext);\r\n    const [filter, setFilter] = useContext(FilteredTaskContext);\r\n\r\n    const [local, setLocal] = useState([])\r\n    useEffect(() => {\r\n\r\n        setLocal(tasks)\r\n        \r\n\r\n    }, [tasks])\r\n\r\n    \r\n    console.log(tasks)\r\n    return (\r\n\r\n        <div className=\"taskList\">\r\n            {\r\n                local !== null \r\n                    ? (\r\n                        local.map((item, index) => (\r\n                            filter\r\n                                ? (\r\n                                    item.status === \"active\" \r\n                                        ?  (<Task key={index} task={item} id={index} />)\r\n                                        : null\r\n\r\n                                )\r\n                                : <Task key={index} task={item} id={index} />\r\n                        ))\r\n                    )\r\n                    : null\r\n            }\r\n        </div> \r\n    )\r\n\r\n}\r\nexport default ToDoList;","import React, { useState, useContext } from 'react';\r\nimport { ToDoListContext } from \"../Context/ToDoListContext\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default function Navigation() {\r\n    const [name, setName] = useState(\"\")\r\n    const [deadline, setDeadline] = useState(\"\")\r\n    const [notes, setNotes] = useState(\"\")\r\n    const [label, setLabel] = useState(\"\")\r\n    const [labels, setLabels] = useState([])\r\n    const [subtask, setSubtask] = useState(\"\")\r\n    const [subtasks, setSubtasks] = useState([])\r\n    const [tasks, setTasks] = useContext(ToDoListContext)\r\n\r\n    const [showAdd, setShowAdd] = useState(false);\r\n    var today = new Date();\r\n    var dd = today.getDate();\r\n    var mm = today.getMonth() + 1;\r\n    var yyyy = today.getFullYear();\r\n    if (dd < 10) {\r\n        dd = '0' + dd\r\n    }\r\n    if (mm < 10) {\r\n        mm = '0' + mm\r\n    }\r\n    today = yyyy + '-' + mm + '-' + dd;\r\n\r\n    const handleAdd = (e) => {\r\n        e.preventDefault();\r\n        var item = {\r\n            id: uuidv4(),\r\n            name: name,\r\n            status: \"active\",\r\n            deadline: deadline,\r\n            notes: notes,\r\n            labels: labels,\r\n            subtasks: subtasks\r\n        }\r\n\r\n        if (name.length > 0) {\r\n            setTasks(tasks => [...tasks, item])\r\n            setName(\"\")\r\n            setDeadline(\"\")\r\n            setNotes(\"\")\r\n            setLabels([])\r\n            setSubtasks([])\r\n\r\n            setShowAdd(false)\r\n        }\r\n\r\n    }\r\n\r\n    const handleLabelAdd = (e) => {\r\n        e.preventDefault();\r\n        if (label.length > 0) {\r\n            setLabels(labels => [...labels, label])\r\n            setLabel(\"\")\r\n        }\r\n    }\r\n\r\n    const handleLabelRemove = (id) => {\r\n        setLabels(labels.filter((e) => (e !== labels[id])))\r\n    }\r\n    const handleSubtaskRemove = (id) => {\r\n        setSubtasks(subtasks.filter((e) => (e !== subtasks[id])))\r\n    }\r\n\r\n    const handleSubtaskAdd = (e) => {\r\n        e.preventDefault();\r\n        var item = {\r\n            name: subtask,\r\n            status: \"active\"\r\n        }\r\n        if (subtask.length > 0) {\r\n            setSubtasks(subtasks => [...subtasks, item])\r\n            setSubtask(\"\")\r\n        }\r\n    }\r\n    const handleModalHide = (e) => {\r\n        e.preventDefault();\r\n        setName(\"\")\r\n        setDeadline(\"\")\r\n        setNotes(\"\")\r\n        setSubtask(\"\")\r\n        setLabel(\"\")\r\n\r\n        setLabels([])\r\n        setSubtasks([])\r\n\r\n        setShowAdd(false)\r\n    }\r\n    return (\r\n        <>\r\n            <button onClick={() => setShowAdd(true)} className=\"addTask\">Add Task</button>\r\n            {showAdd ? (\r\n                <div className=\"overlay\">\r\n                    <form onSubmit={handleAdd}>\r\n                        <div className=\"row jc-sb\">\r\n                            <h3>Add Task</h3>\r\n                            <button onClick={(e) => handleModalHide(e)} className='close'></button>\r\n                        </div>\r\n                        <label className=\"mt-20 block\">Task Name</label>\r\n                        <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\r\n                        <label className=\"mt-20 block\">Notes</label>\r\n                        <textarea value={notes} onChange={(e) => setNotes(e.target.value)} />\r\n                        <div className=\"row jc-sb mt-20\">\r\n                            <div className=\" col-6\">\r\n                                <label>Duedate</label>\r\n                                <input type=\"date\" min={today} value={deadline} onChange={(e) => setDeadline(e.target.value)} />\r\n                            </div>\r\n                            <div className=\"col-6 block\">\r\n                                <label>Labels</label>\r\n                                <div className=\"labels\">\r\n                                    {labels.length > 0 ?\r\n                                        labels.map((item, index) => (\r\n                                            <p key={\"label\" + index}>{item} <span className=\"close\" onClick={() => handleLabelRemove(index)}></span></p>\r\n                                        )) : null\r\n                                    }\r\n                                </div>\r\n                                <input type=\"text\" value={label} onChange={(e) => setLabel(e.target.value)} />\r\n                                <button onClick={(e) => handleLabelAdd(e)} className=\"primary-button mt-10\">Add Label</button>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <label className=\"mt-20\">Subtasks</label>\r\n                        <div className=\"subtasks\">\r\n                            {subtasks.length > 0 ?\r\n                                subtasks.map((item, index) => (\r\n                                    <p key={\"subtask\" + index}>{item.name} <span className=\"close\" onClick={() => handleSubtaskRemove(index)}></span></p>\r\n                                )) : null\r\n                            }\r\n                        </div>\r\n                        <input type=\"text\" value={subtask} onChange={(e) => setSubtask(e.target.value)} />\r\n                        <button onClick={(e) => handleSubtaskAdd(e)} className=\"primary-button mt-10\">Add Subtask</button>\r\n                        <div className=\"block mt-20\">\r\n                            <input type=\"submit\" className=\"primary-button\" value=\"Add task \" />\r\n\r\n                        </div>\r\n                    </form>\r\n                </div>) : null}\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useContext } from 'react';\r\nimport { FilteredTaskContext } from \"../Context/FilteredTaskContext\";\r\n\r\n\r\nexport default function Filter() {\r\n    const [filter, setFilter] = useContext(FilteredTaskContext);\r\n\r\n    const handleCheck = () => {\r\n        setFilter(!filter)\r\n    }\r\n    return (\r\n        <div className=\"row jc-sb\">\r\n            <div>\r\n                Hide completed tasks\r\n            <div className=\"container\">\r\n                    <label className=\"switch\" htmlFor=\"checkbox\" >\r\n                        <input type=\"checkbox\" id=\"checkbox\" onChange={() => handleCheck()} />\r\n                        <div className=\"slider round\"></div>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ToDoList from './ToDoList/ToDoList';\r\nimport Navigation from './Navigation/Navigation';\r\nimport Filter from './Filter/Filter';\r\nimport { ToDoListProvider } from \"./Context/ToDoListContext\";\r\nimport { FilteredTaskProvider } from \"./Context/FilteredTaskContext\";\r\nimport './App.css';\r\nfunction App() {\r\n  return (\r\n    <FilteredTaskProvider>\r\n      <ToDoListProvider>\r\n        <div className=\"App\">\r\n          <h1 className='logo'>My React ToDo List</h1>\r\n          <Navigation />\r\n          <Filter />\r\n          <ToDoList />\r\n\r\n        </div>\r\n        <div className=\"footer\">To Do List - 2020</div>\r\n      </ToDoListProvider>\r\n    </FilteredTaskProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}